<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mona Cloud Photos</title>
    <link rel="me" href="https://mastodon.social/@jonny_kuang">
    <link rel="me" href="https://mastodon.social/@monaapp">
    
    <meta property="og:title" content="‎Mona Cloud Photos: high resolution HDR and Live Photos">
    <meta property="og:description" content="‎Check these Live Photos I uploaded via the Mona app!">
    <meta property="og:site_name" content="Mona Cloud Photos">
    <meta property="og:url" content="<%= og_url %>">
    <meta property="og:image" content="https://getmona.app/link_preview/link_preview_2.png">
    <meta property="og:image:alt" content="Mona for Mastodon on the App Store">
    <meta property="og:image:type" content="image/png">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:image:secure_url" content="https://getmona.app/link_preview/link_preview_2.png">
    <meta property="og:type" content="website">
    <meta property="og:locale" content="en_US">
    
    <meta name="twitter:title" content="Mona Cloud Photos: high resolution HDR and Live Photos">
    <meta name="twitter:description" content="‎Check these Live Photos I uploaded via the Mona app!">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="https://getmona.app/link_preview/link_preview_2.png">
    <meta name="twitter:image:alt" content="Mona for Mastodon on the App Store">
    
    <link rel="stylesheet" href="LivePhotoViewer.css">
    <script src="https://cdn.apple-livephotoskit.com/lpk/1/livephotoskit.js"></script>
  </head>
  <body>
    
    <div class="controls">
      <!-- Report Button -->
      <button style="visibility: hidden;" class="report-btn" title="Report">&#9888;</button>
      
      <!-- Prev/Next buttons + dots -->
      <button id="prevBtn" aria-label="Previous page">&larr;</button>
      <div class="dots" id="dots"></div>
      <button id="nextBtn" aria-label="Next page">&rarr;</button>
      
      <!-- Menu Button -->
      <div class="menu-wrapper">
        <button id="menu-btn" title="Menu" aria-label="Menu" style="font-size: 24px;">⋯</button>
        <div id="menu" class="menu hidden">
          <button id="download-photo" class="menuItem">Download Photo</button>
          <button id="download-video" class="menuItem">Download Video</button>
          <button id="reportBtn" class="menuItem">Report a Concern…</button>
        </div>
      </div>
    </div>
    
    <!-- Report Modal -->
    <div class="report-modal hidden">
      <div class="report-content">
        <h3>Report</h3>
        <select class="report-reason" id="report-reason">
          <option value="" disabled selected>Select Reason</option>
          <option value="1">Copyright Infringement</option>
          <option value="2">Privacy Violation</option>
          <option value="3">Nudity or Sexual Content</option>
          <option value="4">Violence or Graphic Content</option>
          <option value="0">Other Reasons</option>
        </select>
        
        <textarea placeholder="Comment (optional)" class="report-comment" id="report-comment"></textarea>
        
        <div class="report-actions">
          <button class="cancel-report">Cancel</button>
          <button class="submit-report" disabled>Submit</button>
        </div>
      </div>
    </div>
    
    <script>
      const records = <%= records_json %>;
      const totalPages = records.length;
      
      const carousel = document.createElement('div');
      carousel.className = 'carousel';
      carousel.id = 'carousel';
      
      records.forEach((item, index) => {
        const page = document.createElement('div');
        page.className = 'page';
        page.id = `page${index + 1}`;
        carousel.appendChild(page);
      });
      document.body.insertBefore(carousel, document.body.firstChild);
      
      const dotsContainer = document.getElementById('dots');
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      
      let currentPage = 0; // zero-based index
      
      // Create pagination dots dynamically
      for (let i = 0; i < totalPages; i++) {
        const dot = document.createElement('div');
        dot.className = 'dot';
        if(i === currentPage) dot.classList.add('active');
        dot.addEventListener('click', () => scrollToPage(i));
        dotsContainer.appendChild(dot);
      }
      const dots = dotsContainer.querySelectorAll('.dot');
      
      function getErrorMessage(ev) {
        let errorMessage = '';
        
        if (typeof ev.detail.errorCode === 'number') {
          switch (ev.detail.errorCode) {
            case LivePhotosKit.Errors.IMAGE_FAILED_TO_LOAD:
              errorMessage = 'Failed to load photo.';
              break;
            case LivePhotosKit.Errors.VIDEO_FAILED_TO_LOAD:
              errorMessage = 'Failed to load video.';
              break;
            default:
              errorMessage = 'An unknown error occurred.';
              break;
          }
        } else {
          console.error(ev.detail.error);
          errorMessage = 'Unexpected error.';
        }
        return errorMessage;
      }
      
      function makeErrorLabel(errorMessage) {
        const errorDiv = document.createElement('div');
        errorDiv.textContent = errorMessage;
        errorDiv.style.position = 'absolute';
        errorDiv.style.top = '50%';
        errorDiv.style.left = '50%';
        errorDiv.style.transform = 'translate(-50%, -50%)';
        errorDiv.style.backgroundColor = 'rgba(0, 0, 0, 0.75)';
        errorDiv.style.color = '#eee';
        errorDiv.style.padding = '12px 20px';
        errorDiv.style.borderRadius = '8px';
        errorDiv.style.fontSize = '16px';
        errorDiv.style.zIndex = '100';
        return errorDiv;
      }
      
      // Function to create and return a LivePhotosKit player
      function createPlayer(index, shouldPlay = false) {
        const player = LivePhotosKit.createPlayer();
        player.className = 'player';
        player.showsNativeControls = false;
        player.proactivelyLoadsVideo = shouldPlay;
        
        const record = records[index];
        const photoUrl = record.photo?.downloadURL;
        const videoUrl = record.video?.downloadURL;
        
        player.photoMimeType = record.photo?.MIME;
        player.videoMimeType = record.video?.MIME;
        
        if (photoUrl) {
          let needsSpinner = true;
          let spinner = null;
          
          setTimeout(() => {
            if (!needsSpinner) {
              return;
            }
            spinner = document.createElement('div');
            spinner.id = 'loading-spinner';
            spinner.className = 'spinner';
            player.appendChild(spinner);
          }, 500); // 0.5s delay
          
          player.addEventListener('error', (ev) => {
            needsSpinner = false;
            spinner?.remove();
            
            const message = getErrorMessage(ev);
            const label = makeErrorLabel(message);
            player.kjy_errorLabel?.remove();
            player.kjy_errorLabel = label;
            player.appendChild(label);
          })
          player.addEventListener('photoload', evt => {
            needsSpinner = false;
            spinner?.remove();
            
            if (videoUrl) {
              player.showsNativeControls = true;
              if (shouldPlay) {
                player.play();
              }
            }
          });
          fetch(photoUrl).then(res => res.arrayBuffer()).then(buf => {
            player.photoSrc = buf;
          });
        }
        if (videoUrl) {
          fetch(videoUrl).then(res => res.arrayBuffer()).then(buf => {
            player.videoSrc = buf;
          });
          player.addEventListener('canplay', evt => {
            player.kjy_oncePlayable = true;
          });
        }
        return player;
      }
      
      // Lazy load players only for currentPage and neighbors
      function loadVisiblePlayers(autoplay) {
        const videoDownloadButton = document.getElementById("download-video");
        
        for(let i=0; i<totalPages; i++) {
          const page = document.getElementById(`page${i+1}`);
          if(!page) continue;
          
          // Load only current page and neighbors
          if (Math.abs(i - currentPage) <= 1) {
            const player = page.kjy_player;
            const shouldPlay = autoplay && i === currentPage;
            
            if (!player || shouldPlay && player.kjy_oncePlayable && !player.canPlay) {
              if (player) {
                // console.log("Apple bug workaround: once playable but no longer playable player");
                setTimeout(() => {
                  player.remove(); // avoid black flash
                }, 100);
                videoDownloadButton.disabled = false;
              }
              const newPlayer = createPlayer(i, shouldPlay);
              page.appendChild(newPlayer);
              page.kjy_player = newPlayer;
            }
            else if (i === currentPage) {
              if (autoplay) {
                // console.log("player.renderedTime", player.renderedTime, "loadProgress", player.loadProgress.toString(), "canPlay", player.canPlay, "isPlaying", player.isPlaying);
                player.play();
              }
              videoDownloadButton.disabled = !records[i]["video"];
            }
            else if (player.isPlaying) {
              player.stop(); // reduce the chance of getting a once playable but no longer playable player
            }
          }
        }
      }
      
      // Scroll carousel to specific page (0-based)
      function scrollToPage(pageIndex) {
        if(pageIndex < 0 || pageIndex >= totalPages) return;
        carousel.scrollTo({left: pageIndex * window.innerWidth, behavior: 'smooth'});
      }
      
      // Update buttons & dots based on currentPage
      function updateControls() {
        prevBtn.disabled = currentPage === 0;
        nextBtn.disabled = currentPage === totalPages - 1;
        
        dots.forEach((dot, i) => {
          dot.classList.toggle('active', i === currentPage);
        });
      }
      
      // Update currentPage based on scroll position
      function onScroll(scrollingStopped) {
        const scrollLeft = carousel.scrollLeft;
        const pageWidth = window.innerWidth;
        const newPage = Math.round(scrollLeft / pageWidth);
        if(newPage !== currentPage || scrollingStopped) {
          currentPage = newPage;
          loadVisiblePlayers(scrollingStopped);
          updateControls();
        }
      }
      
      // Event listeners for buttons
      prevBtn.addEventListener('click', () => {
        scrollToPage(currentPage - 1);
      });
      nextBtn.addEventListener('click', () => {
        scrollToPage(currentPage + 1);
      });
      
      let scrollTimeout;
      
      // Listen to scroll events to update currentPage
      carousel.addEventListener('scroll', () => {
        onScroll(false);
        
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          onScroll(true); // update after scroll stops
        }, 100); // wait 100ms after last scroll event
      });
      
      // Update on window resize to adjust scroll position exactly
      window.addEventListener('resize', () => {
        scrollToPage(currentPage);
      });
      
      // Initial load
      loadVisiblePlayers(true);
      updateControls();
      
      function getExtensionFromMime(mime) {
        const mimeMap = {
          'image/jpeg': 'jpg',
          'image/png': 'png',
          'image/gif': 'gif',
          'image/webp': 'webp',
          'video/mp4': 'mp4',
          'video/webm': 'webm',
          'video/quicktime': 'mov',
          'application/pdf': 'pdf',
          'text/plain': 'txt',
          'application/zip': 'zip',
          // Add more as needed
        };
        
        return mimeMap[mime] || '';
      }
      async function startDownload(fileUrl, mime) {
        const fileExtension = getExtensionFromMime(mime);
        
        try {
          const response = await fetch(fileUrl);
          const blob = await response.blob();
          const objectUrl = URL.createObjectURL(blob);
          
          const a = document.createElement('a');
          a.href = objectUrl;
          a.download = 'MonaCloudPhoto.' + fileExtension; // force download filename
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          
          URL.revokeObjectURL(objectUrl); // Clean up
        } catch (err) {
          console.error('Download failed:', err);
        }
      }
      function download(type) {
        const item = records[currentPage][type];
        if (item) {
          const fileUrl = item["downloadURL"];
          const mime = item["MIME"];
          startDownload(fileUrl, mime);
        }
      }
      function configureDownloadButtons() {
        document.getElementById('download-photo').addEventListener('click', async () => {
          download("photo");
        });
        document.getElementById('download-video').addEventListener('click', async () => {
          download("video");
        });
      }
      configureDownloadButtons()
      </script>
      
      <script>
      const reasonSelect = document.getElementById('report-reason');
      const submitButton = document.querySelector('.submit-report');
      
      // Enable or disable the submit button based on selected reason
      reasonSelect.addEventListener('change', () => {
        submitButton.disabled = !reasonSelect.value;
      });
      
      document.getElementById("reportBtn").addEventListener('click', () => {
        document.querySelector('.report-modal').classList.remove('hidden');
      });
      
      document.querySelector('.cancel-report').addEventListener('click', () => {
        document.querySelector('.report-modal').classList.add('hidden');
      });
      
      document.querySelector('.submit-report').addEventListener('click', () => {
        const commentButton = document.getElementById('report-comment');
        
        const reason = reasonSelect?.value;
        const comment = commentButton?.value;
        const recordId = "<%= report_record_id %>";
        
        if (!reason) {
          alert('Please select a reason.');
          return;
        }
        reasonSelect.value = '';
        commentButton.value = '';
        submitButton.disabled = true;
        
        document.querySelector('.report-modal').classList.add('hidden');
        
        // Send to server
        fetch("https://getmona.app/api/report_live_photos", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ recordId, reason, comment })
        })
        .then(response => {
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          return response.json();
        })
        .then(data => {
          console.log("Server response:", data);
        })
        .catch(error => {
          console.error("Error submitting report:", error);
        });
      });
      </script>
      
      <script>
      const menuBtn = document.getElementById('menu-btn');
      const menu = document.getElementById('menu');
      
      menuBtn.addEventListener('click', () => {
        menu.classList.toggle('hidden');
      });
      
      // hide menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!menu.contains(e.target) && !menuBtn.contains(e.target)) {
          menu.classList.add('hidden');
        }
      });
      
      document.querySelectorAll('.menuItem').forEach(item => {
        item.addEventListener('click', () => {
          document.querySelector('.menu').classList.add('hidden');
        });
      });
      </script>
    </body>
</html>
      