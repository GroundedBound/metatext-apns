<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mona Cloud Photos</title>
    <link rel="me" href="https://mastodon.social/@jonny_kuang">
    <link rel="me" href="https://mastodon.social/@monaapp">
    
    <meta property="og:title" content="‎Mona Cloud Photos: high resolution HDR and Live Photos">
    <meta property="og:description" content="‎Check these Live Photos I uploaded via the Mona app!">
    <meta property="og:site_name" content="Mona Cloud Photos">
    <meta property="og:url" content="<%= og_url %>">
    <meta property="og:image" content="https://getmona.app/link_preview/link_preview_2.png">
    <meta property="og:image:alt" content="Mona for Mastodon on the App Store">
    <meta property="og:image:type" content="image/png">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:image:secure_url" content="https://getmona.app/link_preview/link_preview_2.png">
    <meta property="og:type" content="website">
    <meta property="og:locale" content="en_US">
    
    <meta name="twitter:title" content="Mona Cloud Photos: high resolution HDR and Live Photos">
    <meta name="twitter:description" content="‎Check these Live Photos I uploaded via the Mona app!">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="https://getmona.app/link_preview/link_preview_2.png">
    <meta name="twitter:image:alt" content="Mona for Mastodon on the App Store">
    
    <link rel="stylesheet" href="LivePhotoViewer.css">
    <script src="https://cdn.apple-livephotoskit.com/lpk/1/livephotoskit.js"></script>
  </head>
  <body>
    
    <!-- Controls: Prev/Next buttons + dots -->
    <div class="controls">
      <button id="prevBtn" aria-label="Previous page">&larr;</button>
      <div class="dots" id="dots"></div>
      <button id="nextBtn" aria-label="Next page">&rarr;</button>
    </div>
    
    <script>
      const records = <%= records_json %>;
      const totalPages = records.length;
      
      const carousel = document.createElement('div');
      carousel.className = 'carousel';
      carousel.id = 'carousel';
      
      records.forEach((item, index) => {
        const page = document.createElement('div');
        page.className = 'page';
        page.id = `page${index + 1}`;
        carousel.appendChild(page);
      });
      document.body.insertBefore(carousel, document.body.firstChild);
      
      const dotsContainer = document.getElementById('dots');
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      
      let currentPage = 0; // zero-based index
      
      // Create pagination dots dynamically
      for (let i = 0; i < totalPages; i++) {
        const dot = document.createElement('div');
        dot.className = 'dot';
        if(i === currentPage) dot.classList.add('active');
        dot.addEventListener('click', () => scrollToPage(i));
        dotsContainer.appendChild(dot);
      }
      const dots = dotsContainer.querySelectorAll('.dot');
      
      function getErrorMessage(ev) {
        let errorMessage = '';
        
        if (typeof ev.detail.errorCode === 'number') {
          switch (ev.detail.errorCode) {
            case LivePhotosKit.Errors.IMAGE_FAILED_TO_LOAD:
              errorMessage = 'Failed to load photo.';
              break;
            case LivePhotosKit.Errors.VIDEO_FAILED_TO_LOAD:
              errorMessage = 'Failed to load video.';
              break;
            default:
              errorMessage = 'An unknown error occurred.';
              break;
          }
        } else {
          console.error(ev.detail.error);
          errorMessage = 'Unexpected error.';
        }
        return errorMessage;
      }
      
      function makeErrorLabel(errorMessage) {
        const errorDiv = document.createElement('div');
        errorDiv.textContent = errorMessage;
        errorDiv.style.position = 'absolute';
        errorDiv.style.top = '50%';
        errorDiv.style.left = '50%';
        errorDiv.style.transform = 'translate(-50%, -50%)';
        errorDiv.style.backgroundColor = 'rgba(0, 0, 0, 0.75)';
        errorDiv.style.color = '#eee';
        errorDiv.style.padding = '12px 20px';
        errorDiv.style.borderRadius = '8px';
        errorDiv.style.fontSize = '16px';
        errorDiv.style.zIndex = '100';
        return errorDiv;
      }
      
      // Function to create and return a LivePhotosKit player
      function createPlayer(record, shouldPlay = false) {
        const player = LivePhotosKit.createPlayer();
        player.className = 'player';
        player.showsNativeControls = false;
        player.proactivelyLoadsVideo = shouldPlay;
        
        const photoUrl = record.photo?.downloadURL;
        const videoUrl = record.video?.downloadURL;
        
        player.photoMimeType = record.photo?.MIME;
        player.videoMimeType = record.video?.MIME;
        
        if (photoUrl) {
          const spinner = document.createElement('div');
          spinner.id = 'loading-spinner';
          spinner.className = 'spinner';
          player.kjy_spinner = spinner;
          player.appendChild(spinner);
          
          player.addEventListener('error', (ev) => {
            const message = getErrorMessage(ev);
            const label = makeErrorLabel(message);
            spinner.remove();
            player.kjy_errorLabel?.remove();
            player.kjy_errorLabel = label;
            player.appendChild(label);
          })
          player.addEventListener('photoload', evt => {
            spinner.remove();
            if (videoUrl) {
              player.showsNativeControls = true;
              if (shouldPlay) {
                player.play();
              }
            }
          });
          fetch(photoUrl).then(res => res.arrayBuffer()).then(buf => {
            player.photoSrc = buf;
          });
        }
        if (videoUrl) {
          fetch(videoUrl).then(res => res.arrayBuffer()).then(buf => {
            player.videoSrc = buf;
          });
          // let playedOnce = false
          // player.addEventListener('canplay', evt => {
          //   if (!playedOnce) {
          //     playedOnce = true;
          //     player.play()
          //   }
          // });
        }
        return player;
      }
      
      // Lazy load players only for currentPage and neighbors
      function loadVisiblePlayers(autoplay) {
        for(let i=0; i<totalPages; i++) {
          const page = document.getElementById(`page${i+1}`);
          if(!page) continue;
          
          // Load only current page and neighbors
          if (Math.abs(i - currentPage) <= 1) {
            if (page.children.length === 0) {
              const shouldPlay = autoplay && i === currentPage;
              const player = createPlayer(records[i], shouldPlay);
              page.appendChild(player);
            } else if (autoplay && i === currentPage) {
              // Already loaded; play it if possible
              const player = page.querySelector('.player');
              if (player?.play) player.play();
            }
          }
        }
      }
      
      // Scroll carousel to specific page (0-based)
      function scrollToPage(pageIndex) {
        if(pageIndex < 0 || pageIndex >= totalPages) return;
        carousel.scrollTo({left: pageIndex * window.innerWidth, behavior: 'smooth'});
      }
      
      // Update buttons & dots based on currentPage
      function updateControls() {
        prevBtn.disabled = currentPage === 0;
        nextBtn.disabled = currentPage === totalPages - 1;
        
        dots.forEach((dot, i) => {
          dot.classList.toggle('active', i === currentPage);
        });
      }
      
      // Update currentPage based on scroll position
      function onScroll(scrollingStopped) {
        const scrollLeft = carousel.scrollLeft;
        const pageWidth = window.innerWidth;
        const newPage = Math.round(scrollLeft / pageWidth);
        if(newPage !== currentPage || scrollingStopped) {
          currentPage = newPage;
          loadVisiblePlayers(scrollingStopped);
          updateControls();
        }
      }
      
      // Event listeners for buttons
      prevBtn.addEventListener('click', () => {
        scrollToPage(currentPage - 1);
      });
      nextBtn.addEventListener('click', () => {
        scrollToPage(currentPage + 1);
      });
      
      let scrollTimeout;
      
      // Listen to scroll events to update currentPage
      carousel.addEventListener('scroll', () => {
        onScroll(false);
        
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          onScroll(true); // update after scroll stops
        }, 50); // wait 50ms after last scroll event
      });
      
      // Update on window resize to adjust scroll position exactly
      window.addEventListener('resize', () => {
        scrollToPage(currentPage);
      });
      
      // Initial load
      loadVisiblePlayers(true);
      updateControls();
      
      </script>
      
    </body>
</html>
